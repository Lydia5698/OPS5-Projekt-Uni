/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Keys;
import jooq.Pmiw21g05V01;
import jooq.tables.records.StationStRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StationSt extends TableImpl<StationStRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pmiw21g05_v01.station_st</code>
     */
    public static final StationSt STATION_ST = new StationSt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StationStRecord> getRecordType() {
        return StationStRecord.class;
    }

    /**
     * The column <code>pmiw21g05_v01.station_st.station</code>.
     */
    public final TableField<StationStRecord, String> STATION = createField(DSL.name("station"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.station_st.bezeichnung</code>.
     */
    public final TableField<StationStRecord, String> BEZEICHNUNG = createField(DSL.name("bezeichnung"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.station_st.bezeichnung_lang</code>.
     */
    public final TableField<StationStRecord, String> BEZEICHNUNG_LANG = createField(DSL.name("bezeichnung_lang"), SQLDataType.VARCHAR(200).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.station_st.stationstyp</code>.
     */
    public final TableField<StationStRecord, String> STATIONSTYP = createField(DSL.name("stationstyp"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private StationSt(Name alias, Table<StationStRecord> aliased) {
        this(alias, aliased, null);
    }

    private StationSt(Name alias, Table<StationStRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.station_st</code> table reference
     */
    public StationSt(String alias) {
        this(DSL.name(alias), STATION_ST);
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.station_st</code> table reference
     */
    public StationSt(Name alias) {
        this(alias, STATION_ST);
    }

    /**
     * Create a <code>pmiw21g05_v01.station_st</code> table reference
     */
    public StationSt() {
        this(DSL.name("station_st"), null);
    }

    public <O extends Record> StationSt(Table<O> child, ForeignKey<O, StationStRecord> key) {
        super(child, key, STATION_ST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pmiw21g05V01.PMIW21G05_V01;
    }

    @Override
    public UniqueKey<StationStRecord> getPrimaryKey() {
        return Keys.KEY_STATION_ST_PRIMARY;
    }

    @Override
    public StationSt as(String alias) {
        return new StationSt(DSL.name(alias), this);
    }

    @Override
    public StationSt as(Name alias) {
        return new StationSt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StationSt rename(String name) {
        return new StationSt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StationSt rename(Name name) {
        return new StationSt(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
