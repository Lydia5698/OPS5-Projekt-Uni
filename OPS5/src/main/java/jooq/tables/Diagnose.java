/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.Indexes;
import jooq.Keys;
import jooq.Pmiw21g05V01;
import jooq.tables.records.DiagnoseRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Diagnose extends TableImpl<DiagnoseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pmiw21g05_v01.diagnose</code>
     */
    public static final Diagnose DIAGNOSE = new Diagnose();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DiagnoseRecord> getRecordType() {
        return DiagnoseRecord.class;
    }

    /**
     * The column <code>pmiw21g05_v01.diagnose.diagnose_id</code>.
     */
    public final TableField<DiagnoseRecord, Integer> DIAGNOSE_ID = createField(DSL.name("diagnose_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>pmiw21g05_v01.diagnose.klartext_diagnose</code>.
     */
    public final TableField<DiagnoseRecord, String> KLARTEXT_DIAGNOSE = createField(DSL.name("klartext_diagnose"), SQLDataType.VARCHAR(200).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.diagnose.datum</code>.
     */
    public final TableField<DiagnoseRecord, LocalDateTime> DATUM = createField(DSL.name("datum"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.diagnose.erstell_zeit</code>.
     */
    public final TableField<DiagnoseRecord, LocalDateTime> ERSTELL_ZEIT = createField(DSL.name("erstell_zeit"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.diagnose.bearbeiter_zeit</code>.
     */
    public final TableField<DiagnoseRecord, LocalDateTime> BEARBEITER_ZEIT = createField(DSL.name("bearbeiter_zeit"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.diagnose.storniert</code>.
     */
    public final TableField<DiagnoseRecord, Boolean> STORNIERT = createField(DSL.name("storniert"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.diagnose.op_id</code>.
     */
    public final TableField<DiagnoseRecord, Integer> OP_ID = createField(DSL.name("op_id"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>pmiw21g05_v01.diagnose.diagnosetyp</code>.
     */
    public final TableField<DiagnoseRecord, Integer> DIAGNOSETYP = createField(DSL.name("diagnosetyp"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.diagnose.icd10_code</code>.
     */
    public final TableField<DiagnoseRecord, String> ICD10_CODE = createField(DSL.name("icd10_code"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.diagnose.ersteller</code>.
     */
    public final TableField<DiagnoseRecord, String> ERSTELLER = createField(DSL.name("ersteller"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.diagnose.bearbeiter</code>.
     */
    public final TableField<DiagnoseRecord, String> BEARBEITER = createField(DSL.name("bearbeiter"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private Diagnose(Name alias, Table<DiagnoseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Diagnose(Name alias, Table<DiagnoseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.diagnose</code> table reference
     */
    public Diagnose(String alias) {
        this(DSL.name(alias), DIAGNOSE);
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.diagnose</code> table reference
     */
    public Diagnose(Name alias) {
        this(alias, DIAGNOSE);
    }

    /**
     * Create a <code>pmiw21g05_v01.diagnose</code> table reference
     */
    public Diagnose() {
        this(DSL.name("diagnose"), null);
    }

    public <O extends Record> Diagnose(Table<O> child, ForeignKey<O, DiagnoseRecord> key) {
        super(child, key, DIAGNOSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pmiw21g05V01.PMIW21G05_V01;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DIAGNOSE_FK_DIAGNOSE_DIAGNOSETYP_ST1_IDX, Indexes.DIAGNOSE_FK_DIAGNOSE_ICD10_CODE_ST1_IDX, Indexes.DIAGNOSE_FK_DIAGNOSE_MED_PERSONAL1_IDX, Indexes.DIAGNOSE_FK_DIAGNOSE_MED_PERSONAL2_IDX, Indexes.DIAGNOSE_FK_DIAGNOSE_OPERATION1_IDX);
    }

    @Override
    public Identity<DiagnoseRecord, Integer> getIdentity() {
        return (Identity<DiagnoseRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DiagnoseRecord> getPrimaryKey() {
        return Keys.KEY_DIAGNOSE_PRIMARY;
    }

    @Override
    public List<ForeignKey<DiagnoseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_DIAGNOSE_OPERATION1, Keys.FK_DIAGNOSE_DIAGNOSE_TYP_ST, Keys.FK_DIAGNOSE_ICD10_CODE_ST1, Keys.FK_DIAGNOSE_MED_PERSONAL1, Keys.FK_DIAGNOSE_MED_PERSONAL2);
    }

    private transient Operation _operation;
    private transient DiagnosetypSt _diagnosetypSt;
    private transient Icd10CodeSt _icd10CodeSt;
    private transient MedPersonal _fkDiagnoseMedPersonal1;
    private transient MedPersonal _fkDiagnoseMedPersonal2;

    public Operation operation() {
        if (_operation == null)
            _operation = new Operation(this, Keys.FK_DIAGNOSE_OPERATION1);

        return _operation;
    }

    public DiagnosetypSt diagnosetypSt() {
        if (_diagnosetypSt == null)
            _diagnosetypSt = new DiagnosetypSt(this, Keys.FK_DIAGNOSE_DIAGNOSE_TYP_ST);

        return _diagnosetypSt;
    }

    public Icd10CodeSt icd10CodeSt() {
        if (_icd10CodeSt == null)
            _icd10CodeSt = new Icd10CodeSt(this, Keys.FK_DIAGNOSE_ICD10_CODE_ST1);

        return _icd10CodeSt;
    }

    public MedPersonal fkDiagnoseMedPersonal1() {
        if (_fkDiagnoseMedPersonal1 == null)
            _fkDiagnoseMedPersonal1 = new MedPersonal(this, Keys.FK_DIAGNOSE_MED_PERSONAL1);

        return _fkDiagnoseMedPersonal1;
    }

    public MedPersonal fkDiagnoseMedPersonal2() {
        if (_fkDiagnoseMedPersonal2 == null)
            _fkDiagnoseMedPersonal2 = new MedPersonal(this, Keys.FK_DIAGNOSE_MED_PERSONAL2);

        return _fkDiagnoseMedPersonal2;
    }

    @Override
    public Diagnose as(String alias) {
        return new Diagnose(DSL.name(alias), this);
    }

    @Override
    public Diagnose as(Name alias) {
        return new Diagnose(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Diagnose rename(String name) {
        return new Diagnose(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Diagnose rename(Name name) {
        return new Diagnose(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, LocalDateTime, LocalDateTime, LocalDateTime, Boolean, Integer, Integer, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
