/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;

import jooq.Keys;
import jooq.Pmiw21g05V01;
import jooq.tables.records.NarkoseStRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NarkoseSt extends TableImpl<NarkoseStRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pmiw21g05_v01.narkose_st</code>
     */
    public static final NarkoseSt NARKOSE_ST = new NarkoseSt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NarkoseStRecord> getRecordType() {
        return NarkoseStRecord.class;
    }

    /**
     * The column <code>pmiw21g05_v01.narkose_st.narkose</code>.
     */
    public final TableField<NarkoseStRecord, Integer> NARKOSE = createField(DSL.name("narkose"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>pmiw21g05_v01.narkose_st.beschreibung</code>.
     */
    public final TableField<NarkoseStRecord, String> BESCHREIBUNG = createField(DSL.name("beschreibung"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private NarkoseSt(Name alias, Table<NarkoseStRecord> aliased) {
        this(alias, aliased, null);
    }

    private NarkoseSt(Name alias, Table<NarkoseStRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.narkose_st</code> table reference
     */
    public NarkoseSt(String alias) {
        this(DSL.name(alias), NARKOSE_ST);
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.narkose_st</code> table reference
     */
    public NarkoseSt(Name alias) {
        this(alias, NARKOSE_ST);
    }

    /**
     * Create a <code>pmiw21g05_v01.narkose_st</code> table reference
     */
    public NarkoseSt() {
        this(DSL.name("narkose_st"), null);
    }

    public <O extends Record> NarkoseSt(Table<O> child, ForeignKey<O, NarkoseStRecord> key) {
        super(child, key, NARKOSE_ST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pmiw21g05V01.PMIW21G05_V01;
    }

    @Override
    public Identity<NarkoseStRecord, Integer> getIdentity() {
        return (Identity<NarkoseStRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NarkoseStRecord> getPrimaryKey() {
        return Keys.KEY_NARKOSE_ST_PRIMARY;
    }

    @Override
    public List<UniqueKey<NarkoseStRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_NARKOSE_ST_NARKOSE);
    }

    @Override
    public NarkoseSt as(String alias) {
        return new NarkoseSt(DSL.name(alias), this);
    }

    @Override
    public NarkoseSt as(Name alias) {
        return new NarkoseSt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NarkoseSt rename(String name) {
        return new NarkoseSt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NarkoseSt rename(Name name) {
        return new NarkoseSt(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
