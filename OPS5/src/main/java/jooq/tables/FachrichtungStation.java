/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;

import jooq.Indexes;
import jooq.Keys;
import jooq.Pmiw21g05V01;
import jooq.tables.records.FachrichtungStationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FachrichtungStation extends TableImpl<FachrichtungStationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pmiw21g05_v01.fachrichtung_station</code>
     */
    public static final FachrichtungStation FACHRICHTUNG_STATION = new FachrichtungStation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FachrichtungStationRecord> getRecordType() {
        return FachrichtungStationRecord.class;
    }

    /**
     * The column
     * <code>pmiw21g05_v01.fachrichtung_station.fachrichtung_st</code>.
     */
    public final TableField<FachrichtungStationRecord, String> FACHRICHTUNG_ST = createField(DSL.name("fachrichtung_st"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.fachrichtung_station.station_st</code>.
     */
    public final TableField<FachrichtungStationRecord, String> STATION_ST = createField(DSL.name("station_st"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private FachrichtungStation(Name alias, Table<FachrichtungStationRecord> aliased) {
        this(alias, aliased, null);
    }

    private FachrichtungStation(Name alias, Table<FachrichtungStationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.fachrichtung_station</code> table
     * reference
     */
    public FachrichtungStation(String alias) {
        this(DSL.name(alias), FACHRICHTUNG_STATION);
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.fachrichtung_station</code> table
     * reference
     */
    public FachrichtungStation(Name alias) {
        this(alias, FACHRICHTUNG_STATION);
    }

    /**
     * Create a <code>pmiw21g05_v01.fachrichtung_station</code> table reference
     */
    public FachrichtungStation() {
        this(DSL.name("fachrichtung_station"), null);
    }

    public <O extends Record> FachrichtungStation(Table<O> child, ForeignKey<O, FachrichtungStationRecord> key) {
        super(child, key, FACHRICHTUNG_STATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pmiw21g05V01.PMIW21G05_V01;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FACHRICHTUNG_STATION_FK_FACHRICHTUNG_STATION_FACHRICHTUNG_ST1_IDX, Indexes.FACHRICHTUNG_STATION_FK_FACHRICHTUNG_STATION_STATION_ST1_IDX);
    }

    @Override
    public UniqueKey<FachrichtungStationRecord> getPrimaryKey() {
        return Keys.KEY_FACHRICHTUNG_STATION_PRIMARY;
    }

    @Override
    public List<ForeignKey<FachrichtungStationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_FACHRICHTUNG_STATION_FACHRICHTUNG_ST1, Keys.FK_FACHRICHTUNG_STATION_STATION_ST1);
    }

    private transient FachrichtungSt _fachrichtungSt;
    private transient StationSt _stationSt;

    public FachrichtungSt fachrichtungSt() {
        if (_fachrichtungSt == null)
            _fachrichtungSt = new FachrichtungSt(this, Keys.FK_FACHRICHTUNG_STATION_FACHRICHTUNG_ST1);

        return _fachrichtungSt;
    }

    public StationSt stationSt() {
        if (_stationSt == null)
            _stationSt = new StationSt(this, Keys.FK_FACHRICHTUNG_STATION_STATION_ST1);

        return _stationSt;
    }

    @Override
    public FachrichtungStation as(String alias) {
        return new FachrichtungStation(DSL.name(alias), this);
    }

    @Override
    public FachrichtungStation as(Name alias) {
        return new FachrichtungStation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FachrichtungStation rename(String name) {
        return new FachrichtungStation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FachrichtungStation rename(Name name) {
        return new FachrichtungStation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
