/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.Indexes;
import jooq.Keys;
import jooq.Pmiw21g05V01;
import jooq.tables.records.FallRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fall extends TableImpl<FallRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pmiw21g05_v01.fall</code>
     */
    public static final Fall FALL = new Fall();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FallRecord> getRecordType() {
        return FallRecord.class;
    }

    /**
     * The column <code>pmiw21g05_v01.fall.fall_id</code>.
     */
    public final TableField<FallRecord, Integer> FALL_ID = createField(DSL.name("fall_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>pmiw21g05_v01.fall.aufnahmedatum</code>.
     */
    public final TableField<FallRecord, LocalDateTime> AUFNAHMEDATUM = createField(DSL.name("aufnahmedatum"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.fall.entlassungsdatum</code>.
     */
    public final TableField<FallRecord, LocalDateTime> ENTLASSUNGSDATUM = createField(DSL.name("entlassungsdatum"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.fall.erstell_zeit</code>.
     */
    public final TableField<FallRecord, LocalDateTime> ERSTELL_ZEIT = createField(DSL.name("erstell_zeit"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.fall.bearbeiter_zeit</code>.
     */
    public final TableField<FallRecord, LocalDateTime> BEARBEITER_ZEIT = createField(DSL.name("bearbeiter_zeit"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.fall.storniert</code>.
     */
    public final TableField<FallRecord, Boolean> STORNIERT = createField(DSL.name("storniert"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.fall.pat_id</code>.
     */
    public final TableField<FallRecord, Integer> PAT_ID = createField(DSL.name("pat_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.fall.station_st</code>.
     */
    public final TableField<FallRecord, String> STATION_ST = createField(DSL.name("station_st"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.fall.ersteller</code>.
     */
    public final TableField<FallRecord, String> ERSTELLER = createField(DSL.name("ersteller"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.fall.bearbeiter</code>.
     */
    public final TableField<FallRecord, String> BEARBEITER = createField(DSL.name("bearbeiter"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.fall.fall_typ</code>.
     */
    public final TableField<FallRecord, Integer> FALL_TYP = createField(DSL.name("fall_typ"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    private Fall(Name alias, Table<FallRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fall(Name alias, Table<FallRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.fall</code> table reference
     */
    public Fall(String alias) {
        this(DSL.name(alias), FALL);
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.fall</code> table reference
     */
    public Fall(Name alias) {
        this(alias, FALL);
    }

    /**
     * Create a <code>pmiw21g05_v01.fall</code> table reference
     */
    public Fall() {
        this(DSL.name("fall"), null);
    }

    public <O extends Record> Fall(Table<O> child, ForeignKey<O, FallRecord> key) {
        super(child, key, FALL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pmiw21g05V01.PMIW21G05_V01;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FALL_FK_FALL_MED_PERSONAL1_IDX, Indexes.FALL_FK_FALL_MED_PERSONAL2_IDX, Indexes.FALL_FK_FALL_PATIENT1_IDX, Indexes.FALL_FK_FALL_STATION_ST1_IDX);
    }

    @Override
    public Identity<FallRecord, Integer> getIdentity() {
        return (Identity<FallRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FallRecord> getPrimaryKey() {
        return Keys.KEY_FALL_PRIMARY;
    }

    @Override
    public List<ForeignKey<FallRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_FALL_PATIENT, Keys.FK_FALL_STATION_ST1, Keys.FK_FALL_MED_PERSONAL1, Keys.FK_FALL_MED_PERSONAL2, Keys.FK_FALL_FALL_TYP_ST1);
    }

    private transient Patient _patient;
    private transient StationSt _stationSt;
    private transient MedPersonal _fkFallMedPersonal1;
    private transient MedPersonal _fkFallMedPersonal2;
    private transient FallTypSt _fallTypSt;

    public Patient patient() {
        if (_patient == null)
            _patient = new Patient(this, Keys.FK_FALL_PATIENT);

        return _patient;
    }

    public StationSt stationSt() {
        if (_stationSt == null)
            _stationSt = new StationSt(this, Keys.FK_FALL_STATION_ST1);

        return _stationSt;
    }

    public MedPersonal fkFallMedPersonal1() {
        if (_fkFallMedPersonal1 == null)
            _fkFallMedPersonal1 = new MedPersonal(this, Keys.FK_FALL_MED_PERSONAL1);

        return _fkFallMedPersonal1;
    }

    public MedPersonal fkFallMedPersonal2() {
        if (_fkFallMedPersonal2 == null)
            _fkFallMedPersonal2 = new MedPersonal(this, Keys.FK_FALL_MED_PERSONAL2);

        return _fkFallMedPersonal2;
    }

    public FallTypSt fallTypSt() {
        if (_fallTypSt == null)
            _fallTypSt = new FallTypSt(this, Keys.FK_FALL_FALL_TYP_ST1);

        return _fallTypSt;
    }

    @Override
    public Fall as(String alias) {
        return new Fall(DSL.name(alias), this);
    }

    @Override
    public Fall as(Name alias) {
        return new Fall(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fall rename(String name) {
        return new Fall(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fall rename(Name name) {
        return new Fall(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime, Boolean, Integer, String, String, String, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
