/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.Indexes;
import jooq.Keys;
import jooq.Pmiw21g05V01;
import jooq.tables.records.OperationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Operation extends TableImpl<OperationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pmiw21g05_v01.operation</code>
     */
    public static final Operation OPERATION = new Operation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OperationRecord> getRecordType() {
        return OperationRecord.class;
    }

    /**
     * The column <code>pmiw21g05_v01.operation.op_id</code>.
     */
    public final TableField<OperationRecord, Integer> OP_ID = createField(DSL.name("op_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.beginn</code>.
     */
    public final TableField<OperationRecord, LocalDateTime> BEGINN = createField(DSL.name("beginn"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.ende</code>.
     */
    public final TableField<OperationRecord, LocalDateTime> ENDE = createField(DSL.name("ende"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.bauchtuecher_prae</code>.
     */
    public final TableField<OperationRecord, Integer> BAUCHTUECHER_PRAE = createField(DSL.name("bauchtuecher_prae"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.bauchtuecher_post</code>.
     */
    public final TableField<OperationRecord, Integer> BAUCHTUECHER_POST = createField(DSL.name("bauchtuecher_post"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.schnittzeit</code>.
     */
    public final TableField<OperationRecord, LocalDateTime> SCHNITTZEIT = createField(DSL.name("schnittzeit"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.nahtzeit</code>.
     */
    public final TableField<OperationRecord, LocalDateTime> NAHTZEIT = createField(DSL.name("nahtzeit"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.erstell_zeit</code>.
     */
    public final TableField<OperationRecord, LocalDateTime> ERSTELL_ZEIT = createField(DSL.name("erstell_zeit"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.bearbeiter_zeit</code>.
     */
    public final TableField<OperationRecord, LocalDateTime> BEARBEITER_ZEIT = createField(DSL.name("bearbeiter_zeit"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.storniert</code>.
     */
    public final TableField<OperationRecord, Byte> STORNIERT = createField(DSL.name("storniert"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.fall_id</code>.
     */
    public final TableField<OperationRecord, Integer> FALL_ID = createField(DSL.name("fall_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.op_saal</code>.
     */
    public final TableField<OperationRecord, Integer> OP_SAAL = createField(DSL.name("op_saal"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.narkose_st</code>.
     */
    public final TableField<OperationRecord, Integer> NARKOSE_ST = createField(DSL.name("narkose_st"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.op_typ_st</code>.
     */
    public final TableField<OperationRecord, Integer> OP_TYP_ST = createField(DSL.name("op_typ_st"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.ersteller</code>.
     */
    public final TableField<OperationRecord, String> ERSTELLER = createField(DSL.name("ersteller"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.operation.bearbeiter</code>.
     */
    public final TableField<OperationRecord, String> BEARBEITER = createField(DSL.name("bearbeiter"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private Operation(Name alias, Table<OperationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Operation(Name alias, Table<OperationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.operation</code> table reference
     */
    public Operation(String alias) {
        this(DSL.name(alias), OPERATION);
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.operation</code> table reference
     */
    public Operation(Name alias) {
        this(alias, OPERATION);
    }

    /**
     * Create a <code>pmiw21g05_v01.operation</code> table reference
     */
    public Operation() {
        this(DSL.name("operation"), null);
    }

    public <O extends Record> Operation(Table<O> child, ForeignKey<O, OperationRecord> key) {
        super(child, key, OPERATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pmiw21g05V01.PMIW21G05_V01;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.OPERATION_FK_OPERATION_FALL1_IDX, Indexes.OPERATION_FK_OPERATION_MED_PERSONAL1_IDX, Indexes.OPERATION_FK_OPERATION_MED_PERSONAL2_IDX, Indexes.OPERATION_FK_OPERATION_NARKOSE_ST1_IDX, Indexes.OPERATION_FK_OPERATION_OP_TYP_ST1_IDX);
    }

    @Override
    public Identity<OperationRecord, Integer> getIdentity() {
        return (Identity<OperationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OperationRecord> getPrimaryKey() {
        return Keys.KEY_OPERATION_PRIMARY;
    }

    @Override
    public List<ForeignKey<OperationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_OPERATION_FALL1, Keys.FK_OPERATION_OP_SAAL_ST, Keys.FK_OPERATION_NARKOSE_ST1, Keys.FK_OPERATION_OP_TYP_ST1, Keys.FK_OPERATION_MED_PERSONAL1, Keys.FK_OPERATION_MED_PERSONAL2);
    }

    private transient Fall _fall;
    private transient OpSaalSt _opSaalSt;
    private transient NarkoseSt _narkoseSt;
    private transient OpTypSt _opTypSt;
    private transient MedPersonal _fkOperationMedPersonal1;
    private transient MedPersonal _fkOperationMedPersonal2;

    public Fall fall() {
        if (_fall == null)
            _fall = new Fall(this, Keys.FK_OPERATION_FALL1);

        return _fall;
    }

    public OpSaalSt opSaalSt() {
        if (_opSaalSt == null)
            _opSaalSt = new OpSaalSt(this, Keys.FK_OPERATION_OP_SAAL_ST);

        return _opSaalSt;
    }

    public NarkoseSt narkoseSt() {
        if (_narkoseSt == null)
            _narkoseSt = new NarkoseSt(this, Keys.FK_OPERATION_NARKOSE_ST1);

        return _narkoseSt;
    }

    public OpTypSt opTypSt() {
        if (_opTypSt == null)
            _opTypSt = new OpTypSt(this, Keys.FK_OPERATION_OP_TYP_ST1);

        return _opTypSt;
    }

    public MedPersonal fkOperationMedPersonal1() {
        if (_fkOperationMedPersonal1 == null)
            _fkOperationMedPersonal1 = new MedPersonal(this, Keys.FK_OPERATION_MED_PERSONAL1);

        return _fkOperationMedPersonal1;
    }

    public MedPersonal fkOperationMedPersonal2() {
        if (_fkOperationMedPersonal2 == null)
            _fkOperationMedPersonal2 = new MedPersonal(this, Keys.FK_OPERATION_MED_PERSONAL2);

        return _fkOperationMedPersonal2;
    }

    @Override
    public Operation as(String alias) {
        return new Operation(DSL.name(alias), this);
    }

    @Override
    public Operation as(Name alias) {
        return new Operation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Operation rename(String name) {
        return new Operation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Operation rename(Name name) {
        return new Operation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Integer, LocalDateTime, LocalDateTime, Integer, Integer, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime, Byte, Integer, Integer, Integer, Integer, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
