/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.Indexes;
import jooq.Keys;
import jooq.Pmiw21g05V01;
import jooq.tables.records.PatientRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Patient extends TableImpl<PatientRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pmiw21g05_v01.patient</code>
     */
    public static final Patient PATIENT = new Patient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientRecord> getRecordType() {
        return PatientRecord.class;
    }

    /**
     * The column <code>pmiw21g05_v01.patient.pat_id</code>.
     */
    public final TableField<PatientRecord, Integer> PAT_ID = createField(DSL.name("pat_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.name</code>.
     */
    public final TableField<PatientRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.vorname</code>.
     */
    public final TableField<PatientRecord, String> VORNAME = createField(DSL.name("vorname"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.geburtsdatum</code>.
     */
    public final TableField<PatientRecord, LocalDate> GEBURTSDATUM = createField(DSL.name("geburtsdatum"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.blutgruppe</code>.
     */
    public final TableField<PatientRecord, String> BLUTGRUPPE = createField(DSL.name("blutgruppe"), SQLDataType.VARCHAR(3).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.geschlecht</code>.
     */
    public final TableField<PatientRecord, String> GESCHLECHT = createField(DSL.name("geschlecht"), SQLDataType.CHAR(1).defaultValue(DSL.field("NULL", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.bearbeiter</code>.
     */
    public final TableField<PatientRecord, String> BEARBEITER = createField(DSL.name("bearbeiter"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.bearbeiter_zeit</code>.
     */
    public final TableField<PatientRecord, LocalDateTime> BEARBEITER_ZEIT = createField(DSL.name("bearbeiter_zeit"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.ersteller</code>.
     */
    public final TableField<PatientRecord, String> ERSTELLER = createField(DSL.name("ersteller"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.erstell_zeit</code>.
     */
    public final TableField<PatientRecord, LocalDateTime> ERSTELL_ZEIT = createField(DSL.name("erstell_zeit"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.storniert</code>.
     */
    public final TableField<PatientRecord, Boolean> STORNIERT = createField(DSL.name("storniert"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.geburtsort</code>.
     */
    public final TableField<PatientRecord, String> GEBURTSORT = createField(DSL.name("geburtsort"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.strasse</code>.
     */
    public final TableField<PatientRecord, String> STRASSE = createField(DSL.name("strasse"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.postleitzahl</code>.
     */
    public final TableField<PatientRecord, String> POSTLEITZAHL = createField(DSL.name("postleitzahl"), SQLDataType.VARCHAR(25).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.patient.telefonnummer</code>.
     */
    public final TableField<PatientRecord, String> TELEFONNUMMER = createField(DSL.name("telefonnummer"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private Patient(Name alias, Table<PatientRecord> aliased) {
        this(alias, aliased, null);
    }

    private Patient(Name alias, Table<PatientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.patient</code> table reference
     */
    public Patient(String alias) {
        this(DSL.name(alias), PATIENT);
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.patient</code> table reference
     */
    public Patient(Name alias) {
        this(alias, PATIENT);
    }

    /**
     * Create a <code>pmiw21g05_v01.patient</code> table reference
     */
    public Patient() {
        this(DSL.name("patient"), null);
    }

    public <O extends Record> Patient(Table<O> child, ForeignKey<O, PatientRecord> key) {
        super(child, key, PATIENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pmiw21g05V01.PMIW21G05_V01;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PATIENT_FK_PATIENT_BLUTGRUPPE_ST1_IDX, Indexes.PATIENT_FK_PATIENT_GESCHLECHT_ST1_IDX);
    }

    @Override
    public Identity<PatientRecord, Integer> getIdentity() {
        return (Identity<PatientRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PatientRecord> getPrimaryKey() {
        return Keys.KEY_PATIENT_PRIMARY;
    }

    @Override
    public List<ForeignKey<PatientRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PATIENT_BLUTGRUPPE_ST1, Keys.FK_PATIENT_GESCHLECHT_ST1, Keys.FK_PATIENT_MED_PERSONAL_ST2, Keys.FK_PATIENT_MED_PERSONAL_ST1);
    }

    private transient BlutgruppeSt _blutgruppeSt;
    private transient GeschlechtSt _geschlechtSt;
    private transient MedPersonal _fkPatientMedPersonalSt2;
    private transient MedPersonal _fkPatientMedPersonalSt1;

    public BlutgruppeSt blutgruppeSt() {
        if (_blutgruppeSt == null)
            _blutgruppeSt = new BlutgruppeSt(this, Keys.FK_PATIENT_BLUTGRUPPE_ST1);

        return _blutgruppeSt;
    }

    public GeschlechtSt geschlechtSt() {
        if (_geschlechtSt == null)
            _geschlechtSt = new GeschlechtSt(this, Keys.FK_PATIENT_GESCHLECHT_ST1);

        return _geschlechtSt;
    }

    public MedPersonal fkPatientMedPersonalSt2() {
        if (_fkPatientMedPersonalSt2 == null)
            _fkPatientMedPersonalSt2 = new MedPersonal(this, Keys.FK_PATIENT_MED_PERSONAL_ST2);

        return _fkPatientMedPersonalSt2;
    }

    public MedPersonal fkPatientMedPersonalSt1() {
        if (_fkPatientMedPersonalSt1 == null)
            _fkPatientMedPersonalSt1 = new MedPersonal(this, Keys.FK_PATIENT_MED_PERSONAL_ST1);

        return _fkPatientMedPersonalSt1;
    }

    @Override
    public Patient as(String alias) {
        return new Patient(DSL.name(alias), this);
    }

    @Override
    public Patient as(Name alias) {
        return new Patient(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(String name) {
        return new Patient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(Name name) {
        return new Patient(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, String, String, LocalDate, String, String, String, LocalDateTime, String, LocalDateTime, Boolean, String, String, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
