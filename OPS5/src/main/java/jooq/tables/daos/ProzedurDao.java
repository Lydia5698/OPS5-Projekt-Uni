/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import jooq.tables.Prozedur;
import jooq.tables.records.ProzedurRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProzedurDao extends DAOImpl<ProzedurRecord, jooq.tables.pojos.Prozedur, Integer> {

    /**
     * Create a new ProzedurDao without any configuration
     */
    public ProzedurDao() {
        super(Prozedur.PROZEDUR, jooq.tables.pojos.Prozedur.class);
    }

    /**
     * Create a new ProzedurDao with an attached configuration
     */
    public ProzedurDao(Configuration configuration) {
        super(Prozedur.PROZEDUR, jooq.tables.pojos.Prozedur.class, configuration);
    }

    @Override
    public Integer getId(jooq.tables.pojos.Prozedur object) {
        return object.getProzId();
    }

    /**
     * Fetch records that have <code>proz_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchRangeOfProzId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Prozedur.PROZEDUR.PROZ_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>proz_id IN (values)</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchByProzId(Integer... values) {
        return fetch(Prozedur.PROZEDUR.PROZ_ID, values);
    }

    /**
     * Fetch a unique record that has <code>proz_id = value</code>
     */
    public jooq.tables.pojos.Prozedur fetchOneByProzId(Integer value) {
        return fetchOne(Prozedur.PROZEDUR.PROZ_ID, value);
    }

    /**
     * Fetch records that have <code>anmerkung BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchRangeOfAnmerkung(String lowerInclusive, String upperInclusive) {
        return fetchRange(Prozedur.PROZEDUR.ANMERKUNG, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>anmerkung IN (values)</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchByAnmerkung(String... values) {
        return fetch(Prozedur.PROZEDUR.ANMERKUNG, values);
    }

    /**
     * Fetch records that have <code>storniert BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchRangeOfStorniert(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Prozedur.PROZEDUR.STORNIERT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>storniert IN (values)</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchByStorniert(Byte... values) {
        return fetch(Prozedur.PROZEDUR.STORNIERT, values);
    }

    /**
     * Fetch records that have <code>erstell_zeit BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchRangeOfErstellZeit(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Prozedur.PROZEDUR.ERSTELL_ZEIT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>erstell_zeit IN (values)</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchByErstellZeit(LocalDateTime... values) {
        return fetch(Prozedur.PROZEDUR.ERSTELL_ZEIT, values);
    }

    /**
     * Fetch records that have <code>bearbeiter_zeit BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchRangeOfBearbeiterZeit(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Prozedur.PROZEDUR.BEARBEITER_ZEIT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>bearbeiter_zeit IN (values)</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchByBearbeiterZeit(LocalDateTime... values) {
        return fetch(Prozedur.PROZEDUR.BEARBEITER_ZEIT, values);
    }

    /**
     * Fetch records that have <code>op_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchRangeOfOpId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Prozedur.PROZEDUR.OP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>op_id IN (values)</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchByOpId(Integer... values) {
        return fetch(Prozedur.PROZEDUR.OP_ID, values);
    }

    /**
     * Fetch records that have <code>ops_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchRangeOfOpsCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Prozedur.PROZEDUR.OPS_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ops_code IN (values)</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchByOpsCode(String... values) {
        return fetch(Prozedur.PROZEDUR.OPS_CODE, values);
    }

    /**
     * Fetch records that have <code>bearbeiter BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchRangeOfBearbeiter(String lowerInclusive, String upperInclusive) {
        return fetchRange(Prozedur.PROZEDUR.BEARBEITER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>bearbeiter IN (values)</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchByBearbeiter(String... values) {
        return fetch(Prozedur.PROZEDUR.BEARBEITER, values);
    }

    /**
     * Fetch records that have <code>ersteller BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchRangeOfErsteller(String lowerInclusive, String upperInclusive) {
        return fetchRange(Prozedur.PROZEDUR.ERSTELLER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ersteller IN (values)</code>
     */
    public List<jooq.tables.pojos.Prozedur> fetchByErsteller(String... values) {
        return fetch(Prozedur.PROZEDUR.ERSTELLER, values);
    }
}
