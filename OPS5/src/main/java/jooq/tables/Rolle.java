/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.Indexes;
import jooq.Keys;
import jooq.Pmiw21g05V01;
import jooq.tables.records.RolleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rolle extends TableImpl<RolleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pmiw21g05_v01.rolle</code>
     */
    public static final Rolle ROLLE = new Rolle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RolleRecord> getRecordType() {
        return RolleRecord.class;
    }

    /**
     * The column <code>pmiw21g05_v01.rolle.op_id</code>.
     */
    public final TableField<RolleRecord, Integer> OP_ID = createField(DSL.name("op_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.rolle.bearbeiter</code>.
     */
    public final TableField<RolleRecord, String> BEARBEITER = createField(DSL.name("bearbeiter"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.rolle.rolle_st</code>.
     */
    public final TableField<RolleRecord, Integer> ROLLE_ST = createField(DSL.name("rolle_st"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.rolle.bearbeiter_zeit</code>.
     */
    public final TableField<RolleRecord, LocalDateTime> BEARBEITER_ZEIT = createField(DSL.name("bearbeiter_zeit"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.rolle.erstell_zeit</code>.
     */
    public final TableField<RolleRecord, LocalDateTime> ERSTELL_ZEIT = createField(DSL.name("erstell_zeit"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.rolle.ersteller</code>.
     */
    public final TableField<RolleRecord, String> ERSTELLER = createField(DSL.name("ersteller"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.rolle.med_personal_pers_ID</code>.
     */
    public final TableField<RolleRecord, String> MED_PERSONAL_PERS_ID = createField(DSL.name("med_personal_pers_ID"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.rolle.storniert</code>.
     */
    public final TableField<RolleRecord, Byte> STORNIERT = createField(DSL.name("storniert"), SQLDataType.TINYINT.nullable(false), this, "");

    private Rolle(Name alias, Table<RolleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rolle(Name alias, Table<RolleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.rolle</code> table reference
     */
    public Rolle(String alias) {
        this(DSL.name(alias), ROLLE);
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.rolle</code> table reference
     */
    public Rolle(Name alias) {
        this(alias, ROLLE);
    }

    /**
     * Create a <code>pmiw21g05_v01.rolle</code> table reference
     */
    public Rolle() {
        this(DSL.name("rolle"), null);
    }

    public <O extends Record> Rolle(Table<O> child, ForeignKey<O, RolleRecord> key) {
        super(child, key, ROLLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pmiw21g05V01.PMIW21G05_V01;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ROLLE_FK_ROLLE_MED_PERSONAL1_IDX, Indexes.ROLLE_FK_ROLLE_MED_PERSONAL2_IDX, Indexes.ROLLE_FK_ROLLE_MED_PERSONAL3_IDX, Indexes.ROLLE_FK_ROLLE_OPERATION1_IDX, Indexes.ROLLE_FK_ROLLE_ROLLE_ST1_IDX);
    }

    @Override
    public UniqueKey<RolleRecord> getPrimaryKey() {
        return Keys.KEY_ROLLE_PRIMARY;
    }

    @Override
    public List<ForeignKey<RolleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ROLLE_OPERATION1, Keys.FK_ROLLE_MED_PERSONAL1, Keys.FK_ROLLE_ROLLE_ST, Keys.FK_ROLLE_MED_PERSONAL2, Keys.FK_ROLLE_MED_PERSONAL3);
    }

    private transient Operation _operation;
    private transient MedPersonal _fkRolleMedPersonal1;
    private transient RolleSt _rolleSt;
    private transient MedPersonal _fkRolleMedPersonal2;
    private transient MedPersonal _fkRolleMedPersonal3;

    public Operation operation() {
        if (_operation == null)
            _operation = new Operation(this, Keys.FK_ROLLE_OPERATION1);

        return _operation;
    }

    public MedPersonal fkRolleMedPersonal1() {
        if (_fkRolleMedPersonal1 == null)
            _fkRolleMedPersonal1 = new MedPersonal(this, Keys.FK_ROLLE_MED_PERSONAL1);

        return _fkRolleMedPersonal1;
    }

    public RolleSt rolleSt() {
        if (_rolleSt == null)
            _rolleSt = new RolleSt(this, Keys.FK_ROLLE_ROLLE_ST);

        return _rolleSt;
    }

    public MedPersonal fkRolleMedPersonal2() {
        if (_fkRolleMedPersonal2 == null)
            _fkRolleMedPersonal2 = new MedPersonal(this, Keys.FK_ROLLE_MED_PERSONAL2);

        return _fkRolleMedPersonal2;
    }

    public MedPersonal fkRolleMedPersonal3() {
        if (_fkRolleMedPersonal3 == null)
            _fkRolleMedPersonal3 = new MedPersonal(this, Keys.FK_ROLLE_MED_PERSONAL3);

        return _fkRolleMedPersonal3;
    }

    @Override
    public Rolle as(String alias) {
        return new Rolle(DSL.name(alias), this);
    }

    @Override
    public Rolle as(Name alias) {
        return new Rolle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rolle rename(String name) {
        return new Rolle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rolle rename(Name name) {
        return new Rolle(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Integer, LocalDateTime, LocalDateTime, String, String, Byte> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
