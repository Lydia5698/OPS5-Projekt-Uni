/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;

import jooq.Indexes;
import jooq.Keys;
import jooq.Pmiw21g05V01;
import jooq.tables.records.MedPersonalRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MedPersonal extends TableImpl<MedPersonalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pmiw21g05_v01.med_personal</code>
     */
    public static final MedPersonal MED_PERSONAL = new MedPersonal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MedPersonalRecord> getRecordType() {
        return MedPersonalRecord.class;
    }

    /**
     * The column <code>pmiw21g05_v01.med_personal.pers_ID</code>.
     */
    public final TableField<MedPersonalRecord, String> PERS_ID = createField(DSL.name("pers_ID"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.nachname_vorname</code>.
     */
    public final TableField<MedPersonalRecord, String> NACHNAME_VORNAME = createField(DSL.name("nachname_vorname"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.name</code>.
     */
    public final TableField<MedPersonalRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.vorname</code>.
     */
    public final TableField<MedPersonalRecord, String> VORNAME = createField(DSL.name("vorname"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.titel</code>.
     */
    public final TableField<MedPersonalRecord, String> TITEL = createField(DSL.name("titel"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.anrede</code>.
     */
    public final TableField<MedPersonalRecord, String> ANREDE = createField(DSL.name("anrede"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.strasse</code>.
     */
    public final TableField<MedPersonalRecord, String> STRASSE = createField(DSL.name("strasse"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.strasse_2</code>.
     */
    public final TableField<MedPersonalRecord, String> STRASSE_2 = createField(DSL.name("strasse_2"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.land</code>.
     */
    public final TableField<MedPersonalRecord, String> LAND = createField(DSL.name("land"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.plz</code>.
     */
    public final TableField<MedPersonalRecord, String> PLZ = createField(DSL.name("plz"), SQLDataType.VARCHAR(25).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.stadt</code>.
     */
    public final TableField<MedPersonalRecord, String> STADT = createField(DSL.name("stadt"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.telefonnummer</code>.
     */
    public final TableField<MedPersonalRecord, String> TELEFONNUMMER = createField(DSL.name("telefonnummer"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.fachrichtung</code>.
     */
    public final TableField<MedPersonalRecord, String> FACHRICHTUNG = createField(DSL.name("fachrichtung"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.med_personal.fachrichtung_kurz</code>.
     */
    public final TableField<MedPersonalRecord, String> FACHRICHTUNG_KURZ = createField(DSL.name("fachrichtung_kurz"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private MedPersonal(Name alias, Table<MedPersonalRecord> aliased) {
        this(alias, aliased, null);
    }

    private MedPersonal(Name alias, Table<MedPersonalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.med_personal</code> table reference
     */
    public MedPersonal(String alias) {
        this(DSL.name(alias), MED_PERSONAL);
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.med_personal</code> table reference
     */
    public MedPersonal(Name alias) {
        this(alias, MED_PERSONAL);
    }

    /**
     * Create a <code>pmiw21g05_v01.med_personal</code> table reference
     */
    public MedPersonal() {
        this(DSL.name("med_personal"), null);
    }

    public <O extends Record> MedPersonal(Table<O> child, ForeignKey<O, MedPersonalRecord> key) {
        super(child, key, MED_PERSONAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pmiw21g05V01.PMIW21G05_V01;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MED_PERSONAL_FK_MED_PERSONAL_FACHRICHTUNG_ST1_IDX);
    }

    @Override
    public UniqueKey<MedPersonalRecord> getPrimaryKey() {
        return Keys.KEY_MED_PERSONAL_PRIMARY;
    }

    @Override
    public List<ForeignKey<MedPersonalRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_MED_PERSONAL_FACHRICHTUNG_ST1);
    }

    private transient FachrichtungSt _fachrichtungSt;

    public FachrichtungSt fachrichtungSt() {
        if (_fachrichtungSt == null)
            _fachrichtungSt = new FachrichtungSt(this, Keys.FK_MED_PERSONAL_FACHRICHTUNG_ST1);

        return _fachrichtungSt;
    }

    @Override
    public MedPersonal as(String alias) {
        return new MedPersonal(DSL.name(alias), this);
    }

    @Override
    public MedPersonal as(Name alias) {
        return new MedPersonal(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MedPersonal rename(String name) {
        return new MedPersonal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MedPersonal rename(Name name) {
        return new MedPersonal(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, String, String, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
