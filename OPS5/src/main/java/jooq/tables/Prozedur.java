/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.Indexes;
import jooq.Keys;
import jooq.Pmiw21g05V01;
import jooq.tables.records.ProzedurRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Prozedur extends TableImpl<ProzedurRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pmiw21g05_v01.prozedur</code>
     */
    public static final Prozedur PROZEDUR = new Prozedur();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProzedurRecord> getRecordType() {
        return ProzedurRecord.class;
    }

    /**
     * The column <code>pmiw21g05_v01.prozedur.proz_id</code>.
     */
    public final TableField<ProzedurRecord, Integer> PROZ_ID = createField(DSL.name("proz_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>pmiw21g05_v01.prozedur.anmerkung</code>.
     */
    public final TableField<ProzedurRecord, String> ANMERKUNG = createField(DSL.name("anmerkung"), SQLDataType.VARCHAR(200).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.prozedur.storniert</code>.
     */
    public final TableField<ProzedurRecord, Byte> STORNIERT = createField(DSL.name("storniert"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.prozedur.erstell_zeit</code>.
     */
    public final TableField<ProzedurRecord, LocalDateTime> ERSTELL_ZEIT = createField(DSL.name("erstell_zeit"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.prozedur.bearbeiter_zeit</code>.
     */
    public final TableField<ProzedurRecord, LocalDateTime> BEARBEITER_ZEIT = createField(DSL.name("bearbeiter_zeit"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pmiw21g05_v01.prozedur.op_id</code>.
     */
    public final TableField<ProzedurRecord, Integer> OP_ID = createField(DSL.name("op_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.prozedur.ops_code</code>.
     */
    public final TableField<ProzedurRecord, String> OPS_CODE = createField(DSL.name("ops_code"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>pmiw21g05_v01.prozedur.bearbeiter</code>.
     */
    public final TableField<ProzedurRecord, String> BEARBEITER = createField(DSL.name("bearbeiter"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>pmiw21g05_v01.prozedur.ersteller</code>.
     */
    public final TableField<ProzedurRecord, String> ERSTELLER = createField(DSL.name("ersteller"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private Prozedur(Name alias, Table<ProzedurRecord> aliased) {
        this(alias, aliased, null);
    }

    private Prozedur(Name alias, Table<ProzedurRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.prozedur</code> table reference
     */
    public Prozedur(String alias) {
        this(DSL.name(alias), PROZEDUR);
    }

    /**
     * Create an aliased <code>pmiw21g05_v01.prozedur</code> table reference
     */
    public Prozedur(Name alias) {
        this(alias, PROZEDUR);
    }

    /**
     * Create a <code>pmiw21g05_v01.prozedur</code> table reference
     */
    public Prozedur() {
        this(DSL.name("prozedur"), null);
    }

    public <O extends Record> Prozedur(Table<O> child, ForeignKey<O, ProzedurRecord> key) {
        super(child, key, PROZEDUR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pmiw21g05V01.PMIW21G05_V01;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROZEDUR_FK_PROZEDUR_MED_PERSONAL1_IDX, Indexes.PROZEDUR_FK_PROZEDUR_MED_PERSONAL2_IDX, Indexes.PROZEDUR_FK_PROZEDUR_OPERATION1_IDX, Indexes.PROZEDUR_FK_PROZEDUR_OPS_CODE_ST1_IDX);
    }

    @Override
    public Identity<ProzedurRecord, Integer> getIdentity() {
        return (Identity<ProzedurRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProzedurRecord> getPrimaryKey() {
        return Keys.KEY_PROZEDUR_PRIMARY;
    }

    @Override
    public List<ForeignKey<ProzedurRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PROZEDUR_OPERATION1, Keys.FK_PROZEDUR_OPS_CODE_ST1, Keys.FK_PROZEDUR_MED_PERSONAL1, Keys.FK_PROZEDUR_MED_PERSONAL2);
    }

    private transient Operation _operation;
    private transient OpsCodeSt _opsCodeSt;
    private transient MedPersonal _fkProzedurMedPersonal1;
    private transient MedPersonal _fkProzedurMedPersonal2;

    public Operation operation() {
        if (_operation == null)
            _operation = new Operation(this, Keys.FK_PROZEDUR_OPERATION1);

        return _operation;
    }

    public OpsCodeSt opsCodeSt() {
        if (_opsCodeSt == null)
            _opsCodeSt = new OpsCodeSt(this, Keys.FK_PROZEDUR_OPS_CODE_ST1);

        return _opsCodeSt;
    }

    public MedPersonal fkProzedurMedPersonal1() {
        if (_fkProzedurMedPersonal1 == null)
            _fkProzedurMedPersonal1 = new MedPersonal(this, Keys.FK_PROZEDUR_MED_PERSONAL1);

        return _fkProzedurMedPersonal1;
    }

    public MedPersonal fkProzedurMedPersonal2() {
        if (_fkProzedurMedPersonal2 == null)
            _fkProzedurMedPersonal2 = new MedPersonal(this, Keys.FK_PROZEDUR_MED_PERSONAL2);

        return _fkProzedurMedPersonal2;
    }

    @Override
    public Prozedur as(String alias) {
        return new Prozedur(DSL.name(alias), this);
    }

    @Override
    public Prozedur as(Name alias) {
        return new Prozedur(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Prozedur rename(String name) {
        return new Prozedur(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prozedur rename(Name name) {
        return new Prozedur(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, Byte, LocalDateTime, LocalDateTime, Integer, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
